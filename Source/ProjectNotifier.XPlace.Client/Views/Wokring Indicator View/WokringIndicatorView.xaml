<UserControl x:Class="ProjectNotifier.XPlace.Client.WorkingIndicatorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ProjectNotifier.XPlace.Client"
             
			 mc:Ignorable="d" 
             
             d:DesignHeight="250" 
			 d:DesignWidth="400">


    <!-- Login working overlay -->
    <!-- This is obsiously a placeholder. (Dear god I hope so)-->
    
    <!-- Datacontext is bound here because it breaks the Dependency Properties, and DataContext binding chain.
         More info: https://www.nikolalukovic.com/programming/wpf-custom-usercontrol-datacontext-binding-gotcha -->
    <Border DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:WorkingIndicatorView}}"
            
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}, Path=CornerRadius}"
            
            Visibility="Collapsed"
            Opacity="0">

        <Border.Background>
            <SolidColorBrush Color="Black" Opacity="0.3"/>
        </Border.Background>

        <!-- Spining text block -->
        <Border HorizontalAlignment="Center"
                VerticalAlignment="Center"
                
                CornerRadius="8"
                
                Padding="10,5"
                
                Background="White" 
                
                RenderTransformOrigin="0.5,0.5">


            <Border.RenderTransform>
                <RotateTransform/>
            </Border.RenderTransform>

            <!-- A spinning loading text -->
            <TextBlock Text=". . . טוען"
                       FontSize="20"/>

            <Border.Style>
                <Style TargetType="Border">
                    <Style.Triggers>


                        <DataTrigger Binding="{Binding Working}" Value="True">

                            <!-- When LoginWorking is true, wait for the fade in animation to finish and start spining the text -->
                            <DataTrigger.EnterActions>

                                <BeginStoryboard>
                                    <Storyboard>

                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-360"
                                                         
                                                         BeginTime="0:0:0.5"
                                                         Duration="0:0:5"
                                                         
                                                         RepeatBehavior="Forever"/>

                                    </Storyboard>
                                </BeginStoryboard>

                            </DataTrigger.EnterActions>

                            <!-- When LoginWorking is false, continue the spin animation for 5 more seconds and reset it's rotation back to 0 -->
                            <DataTrigger.ExitActions>

                                <BeginStoryboard>
                                    <Storyboard>

                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-360"
                                         
                                                         Duration="0:0:5"/>


                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                                 
                                                         To="0"
                                                         
                                                         BeginTime="0:0:1"
                                                         Duration="0"/>

                                    </Storyboard>
                                </BeginStoryboard>

                            </DataTrigger.ExitActions>

                        </DataTrigger>

                    </Style.Triggers>
                </Style>
            </Border.Style>

        </Border>

        <Border.Style>
            <Style TargetType="Border">
                <Style.Triggers>

                    <!-- When LoginWorking is true fade the overlay in -->
                    <DataTrigger Binding="{Binding Working}" Value="True">

                        <DataTrigger.EnterActions>

                            <BeginStoryboard>

                                <Storyboard >

                                    <!-- Because I can't animate IsHitTestVisible (Something to do with xaml and booleaans) 
                                         I am using Visibility proeprty, Setting it to collapsed and then to visible after
                                         fade-out animation finishes -->
                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                           
                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">

                                        <DiscreteObjectKeyFrame KeyTime="0" 
                                                                
                                                                Value="{x:Static Visibility.Visible}"/>

                                    </ObjectAnimationUsingKeyFrames>

                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                 
                                                      To="1"
                                                      Duration="0:0:1"/>

                                </Storyboard>

                            </BeginStoryboard>

                        </DataTrigger.EnterActions>

                        <DataTrigger.ExitActions>

                            <BeginStoryboard>
                                <Storyboard >

                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                 
                                                     To="0"
                                                     Duration="0:0:1"/>

                                    <ObjectAnimationUsingKeyFrames Duration="0:0:1" 
                                                                         
                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">

                                        <DiscreteObjectKeyFrame KeyTime="0:0:1" 
                                                                Value="{x:Static Visibility.Collapsed}"/>

                                    </ObjectAnimationUsingKeyFrames>

                                </Storyboard>
                            </BeginStoryboard>

                        </DataTrigger.ExitActions>

                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>

    </Border>
</UserControl>